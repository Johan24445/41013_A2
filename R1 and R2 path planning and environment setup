hold on
axis ([-3,3,-3,3,0,3]); 
view(3);

% Environment & Safety Features 
surf([-4,-4;4,4] ...
,[-4,4;-4,4] ...
,[0.01,0.01;0.01,0.01] ...
,'CData',imread('concrete.jpg') ...
,'FaceColor','texturemap')

scaledFac= 0.01;
phone = PlaceObject('Phone.ply', [-0.7/scaledFac,0/scaledFac,0.5/scaledFac]);
scaledVerticesPhone = get(phone, 'Vertices') * scaledFac;
set(phone, 'Vertices', scaledVerticesPhone);
%% 

% barriers =[];
% barriers(1) = PlaceObject('barrier1.5x0.2x1m.ply', [0,1,0]);
% barriers(2) = PlaceObject('barrier1.5x0.2x1m.ply', [0,1,0]);
% barriers(3) = PlaceObject('barrier1.5x0.2x1m.ply', [0,1,0]);
% barriers(4) = PlaceObject('barrier1.5x0.2x1m.ply', [0,1.1,0]);
% 
% theta = [];
% theta(1)= -pi/2;
% theta(2)= pi;
% theta(3)= 0;
% theta(4) = pi/2;
% for i =1:length(barriers)
%  tform = hgtransform;
%  Rz = makehgtform('zrotate', theta(i),'scale', 3);
%  set(tform, 'Matrix', Rz);
%  set(barriers(i), 'Parent', tform);
% end 

% fence = PlaceObject('fenceAssemblyGreenRectangle4x8x2.5m.ply');

fireEx = PlaceObject('fireExtinguisherElevated.ply', [-0.5,2.5,1]);
scaleFactor = 2;  
scaledVertices = get(fireEx, 'Vertices') * scaleFactor;
set(fireEx, 'Vertices', scaledVertices);

emergButton = PlaceObject('emergencyStopWallMounted.ply', [-0.25,-1.25,0.5]);
emerRot= pi;
tform = hgtransform;
R_emer = makehgtform('zrotate', emerRot,'scale', 4);
set(tform, 'Matrix', R_emer);
set(emergButton, 'Parent', tform);


person = PlaceObject('personMaleConstruction.ply', [-4.8,0,0]);
personRot = -pi/2;
tform = hgtransform;
R_person = makehgtform('zrotate', personRot,'scale', 1);
set(tform, 'Matrix', R_person);
set(person, 'Parent', tform);



% Tables 
tableR1  = PlaceObject('tableBrown2.1x1.4x0.5m.ply');
tableMain  = PlaceObject('tableBrown2.1x1.4x0.5m.ply', [0,2,0]);
tableR2 = PlaceObject('tableRound0.3x0.3x0.3m.ply', [-0.6,-0.55,-0.1]);

tableMainRot = pi/2;
tform = hgtransform;
R_person = makehgtform('zrotate', tableMainRot,'scale', 1);
set(tform, 'Matrix', R_person);
set(tableMain, 'Parent', tform);
scaleFactor = 3;  
scaledVertices = get(tableR2, 'Vertices') * scaleFactor;
set(tableR2, 'Vertices', scaledVertices);

% People 
me = PlaceObject('personMaleOld.ply',[-2,-0.35,-1.2]);
meRot = deg2rad(-100);
tform = hgtransform;
R_me = makehgtform('xrotate', meRot,'scale', 1);
set(tform, 'Matrix', R_me);
set(me, 'Parent', tform);



%% Create R1 and R2
r1 = UR3;
r1BaseTransform = transl(0,0, 0.5);
r1.model.base = r1BaseTransform;
r1.model.plot(zeros(1, r1.model.n))

r2 = UR3;
r2BaseTransform = transl(-2, -1.2, 0.6);
r2.model.base = r2BaseTransform;
r2.model.plot(zeros(1, r2.model.n))



%% Activate R1
% Define the time-scaling function
q1 = [0,0,0,-pi/2,0,0];
q2 = [pi,-pi/6,0,-pi/2,0,0];
stepsR1 = 50;
sigmoid_time = @(t) 1 ./ (1 + exp(-20*(t - 0.2)));  % Sigmoid scaling
scaled_t = sigmoid_time(linspace(0, 1, stepsR1));     % Scale the time non-linearly

% Precompute the trajectory using the scaled time
qMatrix1 = zeros(stepsR1, length(q1));
qMatrix2 = jtraj(q2, q1, stepsR1);
for i = 1:stepsR1
    % Interpolate joint space positions based on scaled time
    qMatrix1(i, :) = (1 - scaled_t(i)) * q1 + scaled_t(i) * q2;
end

% Animate motion
for i = 1:stepsR1
    r1.model.animate(qMatrix1(i, :));
    drawnow();
end
pause(0.5);

% Animate return motion
for i = 1:stepsR1
    r1.model.animate(qMatrix2(i, :));  
    drawnow();  
end
%% Activate R2
stepsR2 = 50; 
q3 =[0,0,0,0,0,0];
q4 = [deg2rad(90),deg2rad(-145),deg2rad(-65),deg2rad(-90),deg2rad(90),deg2rad(0)];
qMatrix3 = jtraj(q3, q4, stepsR2);
for i = 1:stepsR2
    r2.model.animate(qMatrix3(i, :));  
    drawnow();  
end
